image: docker:latest

variables:
  REGISTRY_URL: "gitlab:5050"
  DOCKER_DRIVER: overlay2
  DOCKER_HOST: unix:///var/run/docker.sock
  IMAGE_NAME_BASE: "$REGISTRY_URL/adrian-manuel/spvending-managment"
  IMAGE_NAME: "$IMAGE_NAME_BASE:$CI_COMMIT_TAG"
  IMAGE_NAME_LATEST: "$IMAGE_NAME_BASE:latest"
  COMPOSE_PROJECT_NAME: "spvending-managment"

stages:
  - sonarqube
  - build
  - deploy_production

sonarqube:
  #image: sonarsource/sonar-scanner-cli:latest
  image: maven:3.9-eclipse-temurin-22
  stage: sonarqube
  tags:
    - sonar
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"
    GIT_DEPTH: "0"
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
    - |
      if [ -n "$CI_COMMIT_TAG" ]; then
              git fetch origin main
              MERGE_BASE=$(git merge-base "$CI_COMMIT_TAG" origin/main)
              TAG_COMMIT=$(git rev-list -n 1 "$CI_COMMIT_TAG")
              if [ "$MERGE_BASE" = "$TAG_COMMIT" ]; then
                echo "Iniciando análisis con SonarQube..."
                mvn clean verify
                apt-get update && apt-get install -y wget unzip
                wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006-linux.zip
                unzip sonar-scanner-cli-5.0.1.3006-linux.zip
                mv sonar-scanner-5.0.1.3006-linux sonar-scanner
                export PATH=$PATH:$(pwd)/sonar-scanner/bin
                echo "El tag proviene de main. Ejecutando análisis..."
                sonar-scanner -X -Dsonar.projectVersion=${CI_COMMIT_TAG}
              else
                echo "El tag NO proviene de main. Saltando análisis."
              fi
            else
              echo "No es un tag. Saltando análisis."
      fi

  rules:
    - if: $CI_COMMIT_TAG
      when: always

build_image:
  stage: build
  tags:
    - build

  script:
    - |
        if [ -n "$CI_COMMIT_TAG" ]; then
          git fetch origin main
          MERGE_BASE=$(git merge-base "$CI_COMMIT_TAG" origin/main)
          TAG_COMMIT=$(git rev-list -n 1 "$CI_COMMIT_TAG")
          if [ "$MERGE_BASE" = "$TAG_COMMIT" ]; then
                    echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" --password-stdin $REGISTRY_URL
                    docker-compose -f docker-compose.yml build --no-cache --pull
                    docker tag spvending-api-image "$IMAGE_NAME"
                    docker push "$IMAGE_NAME"
                    docker tag spvending-api-image "$IMAGE_NAME_LATEST"
                    docker push "$IMAGE_NAME_LATEST"
            else
                echo "El tag NO proviene de main. Saltando build."
          fi
            else
              echo "No es un tag. Saltando build."
        fi
    

  after_script:
    - docker logout $REGISTRY_URL
  rules:
    - if: $CI_COMMIT_TAG
      when: always
  needs: ["sonarqube"]

deploy_production:
  stage: deploy_production
  tags:
    - production
  needs: ["build_image"]
  services: []
  variables:
    DEPLOY_TAG: "latest"
    DOCKER_HOST: "unix:///var/run/docker.sock"
  before_script:
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" --password-stdin $CI_REGISTRY
  script:
    - |
      if [ -n "$CI_COMMIT_TAG" ]; then
        git fetch origin main
        MERGE_BASE=$(git merge-base "$CI_COMMIT_TAG" origin/main)
        TAG_COMMIT=$(git rev-list -n 1 "$CI_COMMIT_TAG")
        if [ "$MERGE_BASE" = "$TAG_COMMIT" ]; then
          echo "=== DESPLEGANDO VERSIÓN: $DEPLOY_TAG==="
          docker pull "$IMAGE_NAME_BASE:$DEPLOY_TAG"
          docker-compose -f docker-compose.deploy-production.yml down --remove-orphans
          docker-compose -f docker-compose.deploy-production.yml up -d --force-recreate
          echo "=== CONTENEDORES EN EJECUCIÓN ==="
          docker ps --format "table {{.ID}}\t{{.Names}}\t{{.Status}}\t{{.Ports}}"
        else
          echo "El tag NO proviene de main. Saltando build."
        fi
      else
        echo "No es un tag. Saltando build."
      fi
  after_script:
    - docker logout $CI_REGISTRY
  rules:
    - if: $CI_COMMIT_TAG
      when: manual