image: docker:latest

variables:
  DOCKER_DRIVER: overlay2
  DOCKER_HOST: unix:///var/run/docker.sock
  IMAGE_NAME_BASE: "$CI_REGISTRY/smart-vending/spvending-managment"
  IMAGE_NAME: "$IMAGE_NAME_BASE:$CI_COMMIT_TAG"
  GIT_DEPTH: "0"
stages:
  - test
  - build
  - deploy_staging
  - deploy_production
dependency_check:
  stage: test
  image: maven:3.9.6-eclipse-temurin-22
  script:
      - mvn org.owasp:dependency-check-maven:check
      - |
          if grep -q "<severity>Critical</severity>" target/dependency-check-report/dependency-check-report.xml; then
            echo "❌ Vulnerabilidades críticas detectadas"; exit 1;
          fi
  artifacts:
      when: always
      paths:
        - target/dependency-check-report/dependency-check-report.html
        - target/dependency-check-report/dependency-check-report.xml
      reports:
        dependency_scanning: target/dependency-check-report/dependency-check-report.xml
  rules:
    - if: $CI_COMMIT_TAG=~ /^v\d+\.\d+\.\d+$/
      when: always
sonarqube:
  #image: sonarsource/sonar-scanner-cli:latest
  image: maven:3.9-eclipse-temurin-22
  stage: test
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
    - |
      if [ -n "$CI_COMMIT_TAG" ]; then
              git fetch origin main
              if git branch -r --contains "$CI_COMMIT_TAG" | grep -q "origin/main"; then
                echo "Iniciando análisis con SonarQube..."
                mvn clean verify
                apt-get update && apt-get install -y wget unzip
                wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006-linux.zip
                unzip sonar-scanner-cli-5.0.1.3006-linux.zip
                mv sonar-scanner-5.0.1.3006-linux sonar-scanner
                export PATH=$PATH:$(pwd)/sonar-scanner/bin
                echo "El tag proviene de main. Ejecutando análisis..."
                sonar-scanner -X -Dsonar.projectVersion=${CI_COMMIT_TAG} -Dsonar.token=$SONAR_TOKEN
              else
                echo "El tag NO proviene de main. Saltando análisis."
              fi
            else
              echo "No es un tag. Saltando análisis."
      fi

  rules:
    - if: $CI_COMMIT_TAG=~ /^v\d+\.\d+\.\d+$/
      when: always
build_image:
  stage: build
  tags:
    - build
  before_script:
    - echo "$REGISTRY_PASSWORD" | docker login -u "$REGISTRY_USER" --password-stdin "$CI_REGISTRY"
  script:
    - |
      if [ -n "$CI_COMMIT_TAG" ]; then
        git fetch origin main
        if git branch -r --contains "$CI_COMMIT_TAG" | grep -q "origin/main"; then
                  docker-compose -f docker-compose.yml build --no-cache --pull
                  docker tag spvending-api-image "$IMAGE_NAME"
                  docker push "$IMAGE_NAME"
          else
              echo "El tag NO proviene de main. Saltando build."
        fi
          else
            echo "No es un tag. Saltando build."
      fi

  rules:
    - if: $CI_COMMIT_TAG=~ /^v\d+\.\d+\.\d+$/
      when: always

deploy_app_staging:
  stage: deploy_staging
  tags:
    - deploy
  services: []
  variables:
    COMPOSE_PROJECT_NAME: "spvending-managment-staging"
    DOCKER_HOST: "unix:///var/run/docker.sock"
  before_script:
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" --password-stdin "$CI_REGISTRY"
  script:
    - |
      if [ -n "$CI_COMMIT_TAG" ]; then
        git fetch origin main
        if git branch -r --contains "$CI_COMMIT_TAG" | grep -q "origin/main"; then
          export DEPLOY_TAG="${CI_COMMIT_TAG#deploy-staging-}"
          echo "=== DESPLEGANDO VERSIÓN ==="
          docker pull "$IMAGE_NAME_BASE:$DEPLOY_TAG"
          docker-compose -f docker-compose-staging.deploy.yml down --remove-orphans
          docker-compose -f docker-compose-staging.deploy.yml up -d 
          echo "=== CONTENEDORES EN EJECUCIÓN ==="
          docker ps --format "table {{.ID}}\t{{.Names}}\t{{.Status}}\t{{.Ports}}"
        else
          echo "El tag NO proviene de main. Saltando build."
        fi
      else
        echo "No es un tag. Saltando build."
      fi
  after_script:
    - docker logout $CI_REGISTRY
  rules:
    - if: $CI_COMMIT_TAG=~ /^deploy-staging-v\d+\.\d+\.\d+$/

deploy_app_production:
  stage: deploy_production
  image: ubuntu:22.04
  tags:
    - deploy
  services: []
  variables:
    COMPOSE_PROJECT_NAME: "spvending-managment-production"
    DOCKER_HOST: "unix:///var/run/docker.sock"
  before_script:
    - apt-get update
    - apt-get install -y curl docker.io python3-pip
    - pip3 install azure-cli
    - az login --service-principal -u $AZURE_CLIENT_ID -p $AZURE_CLIENT_SECRET --tenant $AZURE_TENANT_ID
    - az account set --subscription $AZURE_SUBSCRIPTION_ID
  script:
    - |
      if [ -n "$CI_COMMIT_TAG" ]; then
          export DEPLOY_TAG="${CI_COMMIT_TAG#deploy-production-}"
          echo "=== DESPLEGANDO VERSIÓN ==="
          az vm run-command invoke --command-id RunShellScript --name SPVendingAPI --resource-group SPVendingAPI_group --scripts "
            mkdir -p /app && cd /app
            sudo rm docker-compose-production.deploy.yml
            tee docker-compose-production.deploy.yml > /dev/null << 'COMPOSE_EOF'
            version: '3.9'
            services:
              spvending-api-image-production:
                image: registry.smartpadelautomation.com/smart-vending/spvending-managment:$DEPLOY_TAG
                container_name: spvending-api-production-container
                ports:
                  - '8082:8080'
                networks:
                  - spring-network-production
                depends_on:
                  - postgres-production
                  - redis-production
                environment:
                  - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-production:5432/tenants_managment_production
                  - SPRING_DATASOURCE_USERNAME=postgres
                  - SPRING_DATASOURCE_PASSWORD=abc123.
                  - SPRING_REDIS_HOST=redis-production
              redis-production:
                image: redis
                container_name: redis_cache_production
                ports:
                  - '6381:6379'
                networks:
                  - spring-network-production
              postgres-production:
                image: postgres
                container_name: postgres_database_production
                environment:
                  POSTGRES_PASSWORD: abc123.
                  POSTGRES_DB: tenants_managment_production
                  POSTGRES_USER: postgres
                ports:
                  - '5434:5432'
                networks:
                  - spring-network-production
                volumes:
                  - postgres-volume-production:/var/lib/postgresql/data
            networks:
              spring-network-production:
                driver: bridge
            volumes:
              postgres-volume-production:
              COMPOSE_EOF
            $(cat docker-compose-production.deploy.yml)
            EOF
            cd /app
            echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" --password-stdin "$CI_REGISTRY"
            docker pull $IMAGE_NAME_BASE:$DEPLOY_TAG
            docker-compose -f docker-compose-production.deploy.yml down --remove-orphans
            docker-compose -f docker-compose-production.deploy.yml up -d
          "
      else
        echo "No es un tag. Saltando despliegue."
      fi
  #after_script:
    #- docker logout $CI_REGISTRY
  rules:
    - if: $CI_COMMIT_TAG=~ /^deploy-production-v\d+\.\d+\.\d+$/